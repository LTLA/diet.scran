% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perCellQCFilters.R
\name{perCellQCFilters.chan}
\alias{perCellQCFilters.chan}
\title{Compute per-cell QC metrics}
\usage{
perCellQCFilters.chan(sums, detected, subsets, nmads = 3)
}
\arguments{
\item{sums}{Numeric vector containing the sum of counts for each cell.}

\item{detected}{Integer vector containing the total number of detected features for each cell.}

\item{subsets}{List of numeric vectors containing the proportion of counts assigned to each feature subset in each cell.}

\item{nmads}{Numeric scalar specifying the number of median absolute deviations to be used to detect outliers.}
}
\value{
A list containing:
\itemize{
    \item \code{filters}, a list containing:
    \itemize{
        \item \code{sums}, a logical vector indicating whether a cell was removed because its total count was too low.
        \item \code{detected}, a logical vector indicating whether a cell was removed because the number of detected features was too low.
        \item \code{subsets}, a list of logical vectors indicating whether a cell was removed because the proportion of counts in each feature subset was too high.
        \item \code{overall}, a logical vector indicating whether a cell was removed for any reason.
    }
    All logical vectors are of length equal to the number of cells.
    \item \code{thresholds}, a list containing:
    \itemize{
        \item \code{sums}, a numeric vector containing the minimum threshold on the total count.
        \item \code{detected}, a numeric vector containing the minimum threshold on the number of detected features.
        \item \code{subsets}, a list of numeric vectors containing the maximum threshold on each feature subset proportion.
    }
    Each numeric vector is of length equal to the number of blocks (default 1 if \code{block=NULL}).
}
}
\description{
Calculate per-cell QC metrics from an initialized matrix.
}
\examples{
# Mocking a matrix:
library(Matrix)
x <- round(abs(rsparsematrix(1000, 100, 0.1) * 100))

# Mocking up a subset:
sub <- list(Mito=rbinom(nrow(x), 1, 0.1) > 0)

# Running the analysis:
y <- initializeSparseMatrix(x)
qc <- perCellQCMetrics.chan(y, sub)
filters <- perCellQCFilters.chan(qc$sums, qc$detected, qc$subsets)
str(filters)

}
\author{
Aaron Lun
}
